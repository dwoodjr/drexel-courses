<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[drexel-teaching]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>drexel-teaching</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 07 Jan 2025 15:54:31 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 07 Jan 2025 15:54:28 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[GMAP 395 - WK 1 - Slides]]></title><description><![CDATA[ 
 <br><br><br><br><br>
<br>Purpose: 

<br>Introduction to procedural real-time game systems and technical art production, exploring workflows in game engines w/ DCCs.


<br>Key Topics:

<br>Procedural and modular workflows.
<br>Real-time systems and node-based workflows.
<br>Shader development and VFX
<br>Lighting systems and camera effects.


<br><br><br>
<br>Definition: The process of designing interactive systems that facilitate structured play.
<br>Core Focus:

<br>Create rules and systems that encourage meaningful interaction.
<br>Design experiences that resonate emotionally and intellectually with players.


<br>--<br><br>
<br>Why Game Design Matters:

<br>Engage players through creativity and interactivity.
<br>Fulfill human needs for autonomy, relatedness, and competence.


<br>Player-Centric Motivations + Goals:

<br>Autonomy: The need to feel in control and make choices that align with your values and priorities.
<br>Relatedness: The need to feel connected to and supported by others.
<br>Competence: The need to feel capable and have the skills and resources to do something.


<br>Self-Determination Theory
<a rel="noopener nofollow" class="external-link" href="https://www.urmc.rochester.edu/community-health/patient-care/self-determination-theory" target="_blank">https://www.urmc.rochester.edu/community-health/patient-care/self-determination-theory</a><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=3vct13OhIio" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=3vct13OhIio" target="_blank">"The Freedom Fallacy"</a>
<br>--<br><br>
<br>Rules:

<br>The boundaries that define what players can and cannot do.
<br>Examples: Movement rules, scoring systems, and constraints.


<br>Systems:

<br>Interconnected rules that shape gameplay experiences.
<br>Examples: Resource management, combat mechanics, or crafting systems.


<br>Player Experience:

<br>The overarching goal of game design is to evoke emotions and sustain player engagement.


<br>--<br><br>
<br>Conceptualize:

<br>Generate ideas and define the game’s objectives.
<br>Example Activities:

<br>Brainstorm themes and mechanics.
<br>Identify the target audience.




<br>Prototype:

<br>Create a basic, playable version of the game.
<br>Example Activities:

<br>Build a simple demo with placeholder assets.




<br>Playtest:

<br>Test with real players to observe how they interact with the game.
<br>Example Activities:

<br>Record player feedback.




<br>Evaluate:

<br>Analyze feedback and refine mechanics and systems.
<br>Example Activities:

<br>Identify areas of improvement.
<br>Implement changes and repeat the cycle.




<br>--<br><br>
<br>Continuous Improvement:

<br>Iteration allows designers to refine ideas based on real-world feedback.


<br>Learning from Failure:

<br>Unsuccessful elements provide insights for improvement.


<br>Key Takeaway: The best games are shaped through repeated cycles of creation, testing, and refinement.
<br>On Iteration:
"Iteration is the backbone of game design—it's where great games are born."
<br>
<br><a data-tooltip-position="top" aria-label="https://gamedesignskills.com/game-design/iterative-process/" rel="noopener nofollow" class="external-link" href="https://gamedesignskills.com/game-design/iterative-process/" target="_blank">How to Apply the Iterative Process in Game Design</a>
<br><a data-tooltip-position="top" aria-label="https://www.gamedeveloper.com/design/making-better-games-through-iteration" rel="noopener nofollow" class="external-link" href="https://www.gamedeveloper.com/design/making-better-games-through-iteration" target="_blank">Making Better Games Through Iteration</a>
<br><br>--<br><br>
<br>Games as Everyday Things:

<br>Video games are modern artifacts of daily interaction, much like physical tools or interfaces.
<br>Designing games requires the same care and consideration as designing everyday objects.


<br><img alt="GMAP 395/Introduction/design-everyday-things.jpg" src="gmap-395\introduction\design-everyday-things.jpg"><br>--<br><br>Key principles from The Design of Everyday Things<br>
<br>Affordances:

<br>Elements that suggest how they should be used.


<br>
<br>In games: A glowing door suggests it can be opened, or a bouncy surface implies jumping.
<br>
<br>Constraints:

<br>Limitations that guide user interaction.
<br>In games: Invisible walls, restricted areas, or locked abilities.


<br>Feedback:

<br>Immediate response to actions.
<br>In games: Sound effects, visual cues, or vibrations indicating success or failure.


<br>Signifiers:

<br>Visual or auditory cues that communicate functionality.
<br>In games: Icons, markers, or prompts that guide players.


<br>--<br><br>
<br>Clarity in Design:

<br>Clear affordances and signifiers reduce player frustration.


<br>Player Intuition:

<br>Well-designed constraints and feedback align with natural player expectations.


<br>Games as Interfaces:

<br>Like everyday tools, games rely on good design to be engaging and accessible.


<br>Further Reading:

<br><a data-tooltip-position="top" aria-label="https://ia902800.us.archive.org/3/items/thedesignofeverydaythingsbydonnorman/The Design of Everyday Things by Don Norman.pdf" rel="noopener nofollow" class="external-link" href="https://ia902800.us.archive.org/3/items/thedesignofeverydaythingsbydonnorman/The%20Design%20of%20Everyday%20Things%20by%20Don%20Norman.pdf" target="_blank">The Design of Everyday Things by Don Norman</a>
<br>



<br><br><br>
<br>Definition:

<br>Play is an activity undertaken for enjoyment, creativity, and engagement.


<br>Characteristics of Play:

<br>Voluntary: A self-chosen activity, not obligatory.
<br>Imaginative: Often involves creativity, make-believe, or exploration.
<br>Intrinsically Motivated: Done for its own sake, without external rewards.
<br>Bounded: Occurs within defined limits (rules, time, or space).


<br>Why Play Matters:

<br>Satisfies intrinsic human needs like autonomy, competence, and relatedness.


<br>Explore More:
<a data-tooltip-position="top" aria-label="https://nifplay.org/play-science/scientific-disciplines-researching-play/" rel="noopener nofollow" class="external-link" href="https://nifplay.org/play-science/scientific-disciplines-researching-play/" target="_blank">Play: How It Shapes the Brain</a><br>
<a data-tooltip-position="top" aria-label="https://mitpress.mit.edu/9780262534512/play-matters/" rel="noopener nofollow" class="external-link" href="https://mitpress.mit.edu/9780262534512/play-matters/" target="_blank">Play Matters</a><br>
<a data-tooltip-position="top" aria-label="https://www.sciencedirect.com/science/article/pii/S014976342300355X" rel="noopener nofollow" class="external-link" href="https://www.sciencedirect.com/science/article/pii/S014976342300355X" target="_blank">Play in video games</a>
<br>--<br><br>
<br>Play:

<br>A broad concept encompassing all enjoyable, engaging activities.
<br>Examples: Free-form exploration, role-playing, or sandbox experimentation.


<br>Gameplay:

<br>Play structured by the rules and systems of a game.
<br>Examples: Completing objectives, solving puzzles, or managing resources.


<br>Key Distinction:

<br>Play is the overarching activity, while gameplay is a specific form of play within a designed context.


<br>--<br><br>
<br>Key Design Elements:

<br>Meaningful Choices:

<br>Offer players impactful decisions that shape their experience.
<br>Example: Branching storylines or multiple gameplay approaches.


<br>Balanced Challenges:

<br>Create obstacles that are achievable yet rewarding.
<br>Example: Gradual difficulty curves to maintain player engagement.


<br>Social Connections:

<br>Enable interactions that foster collaboration or competition.
<br>Example: Multiplayer modes or shared goals.




<br>Encouraging Exploration:

<br>Design systems that allow players to experiment freely within rules.


<br><br>--<br><br>
<br>Game Spotlight: The Legend of Zelda: Breath of the Wild (2017)

<br>Meaningful Choices:

<br>Players can tackle challenges in various ways, from combat to stealth.


<br>Balanced Challenges:

<br>Flexible difficulty, allowing players to approach objectives at their own pace.


<br>Encouraged Exploration:

<br>A vast open world filled with secrets, puzzles, and rewards that encourage curiosity.




<br>An In-Depth Look at Conventions, Design, and Play:

<br><br><br>
<br>What are Frameworks?

<br>Conceptual tools that can help guide the game design process.
<br>Help designers organize ideas and evaluate design decisions.


<br>Why Use Frameworks?

<br>Provide clarity and focus during development.
<br>Facilitate collaboration and communication among teams.


<br>There are many different frameworks for all aspects of game design!
<br>--<br><br>
<br>Definition:

<br>A formalized approach to understanding and designing games.
<br>Introduced by Robin Hunicke, Marc LeBlanc, and Robert Zubek.


<br>
<br>--<br>Components: MDA<br>
<br>Mechanics: The rules and systems governing gameplay.

<br>Example: Jump mechanics in platformers.


<br>Dynamics: The emergent behavior arising from player interaction.

<br>Example: Strategic decisions in chess.


<br>Aesthetics: The emotional response evoked in players.

<br>Example: Tension in horror games.


<br>Learn More: MDA Framework
<a data-tooltip-position="top" aria-label="http://www.cs.northwestern.edu/~hunicke/MDA.pdf" rel="noopener nofollow" class="external-link" href="http://www.cs.northwestern.edu/~hunicke/MDA.pdf" target="_blank">Original MDA Paper (PDF)</a>

<br>--<br><br>
<br>Definition:

<br>A player-focused framework emphasizing iterative development.
<br>Introduced to complement MDA and focus on outcomes.


<br>Components:

<br>Design: The intentional creation of mechanics and systems.
<br>Dynamics: The real-time interactions and behaviors of players.
<br>Experience: The intended and emergent outcomes of gameplay.


<br>Learn More
<a data-tooltip-position="top" aria-label="https://www.researchgate.net/publication/315854140_Design_Dynamics_Experience_DDE_An_Advancement_of_the_MDA_Framework_for_Game_Design" rel="noopener nofollow" class="external-link" href="https://www.researchgate.net/publication/315854140_Design_Dynamics_Experience_DDE_An_Advancement_of_the_MDA_Framework_for_Game_Design" target="_blank">DDE Paper</a><br>
<a data-tooltip-position="top" aria-label="https://www.gamedeveloper.com/design/from-mda-to-dde" rel="noopener nofollow" class="external-link" href="https://www.gamedeveloper.com/design/from-mda-to-dde" target="_blank">From MDA to DDE</a><br>
<a data-tooltip-position="top" aria-label="https://maxlearn.com/blogs/dde-framework-for-game-design-in-microlearning/" rel="noopener nofollow" class="external-link" href="https://maxlearn.com/blogs/dde-framework-for-game-design-in-microlearning/" target="_blank">How to Apply DDE</a>
<br>--<br><br>
<br>MDA vs. DDE:

<br>MDA: Focuses on the relationship between mechanics, dynamics, and aesthetics from a system perspective.
<br>DDE: Centers on the player experience and iterative refinement.


<br>Use Cases:

<br>MDA: Best for understanding and planning complex systems.
<br>DDE: Ideal for refining player experiences through testing and iteration.


<br><br><br>
<br>
Definition:

<br>The bridge between art and technology in game development.
<br>Combines creative and technical skills to enhance workflows and visual quality.


<br>
Key Roles:

<br>Ensure the seamless integration of assets into game engines.
<br>Solve cross-disciplinary challenges between artists and programmers.



<br>--<br><br>
<br>Attention to Detail
<br>Communication and Collaboration
<br>Strong Art and Technical Knowledge
<br>Technical Proficiency
<br>Creative Problem-Solving
<br>Learn More: Tech Art
<a data-tooltip-position="top" aria-label="https://www.tech-artists.org/t/about-the-professional-category/9845" rel="noopener nofollow" class="external-link" href="https://www.tech-artists.org/t/about-the-professional-category/9845" target="_blank">Tech-Artists Site</a><br>
<a data-tooltip-position="top" aria-label="https://www.screenskills.com/job-profiles/browse/games/technical-art/technical-artist/" rel="noopener nofollow" class="external-link" href="https://www.screenskills.com/job-profiles/browse/games/technical-art/technical-artist/" target="_blank">Tech Artists in Games</a><br>
<a data-tooltip-position="top" aria-label="https://www.cgspectrum.com/career-pathways/technical-artist" rel="noopener nofollow" class="external-link" href="https://www.cgspectrum.com/career-pathways/technical-artist" target="_blank">Technical Artist Job</a>
<br>--<br><br>
<br>What is Procedural Thinking?

<br>Using algorithms and rules to automate content creation.


<br>Applications in Game Development:

<br>Terrain and foliage generation.
<br>Character customization systems.


<br>Benefits:

<br>Efficiency: Reduces time spent on repetitive tasks.
<br>Scalability: Enables the creation of vast, dynamic worlds.


<br><br>--<br><br>
<br>What is Modular Thinking?

<br>Designing assets and systems in reusable, interchangeable components.


<br>Applications in Game Development:

<br>Modular level design (e.g., room prefabs in a dungeon).
<br>Swappable character parts or weapons.


<br>Benefits:

<br>Reusability: Saves development time and resources.
<br>Flexibility: Allows easy updates and customization.


<br><br>--<br><br>
<br>How They Work Together:

<br>Procedural techniques generate modular components that can be reused across projects.


<br>Example Workflow:

<br>Procedurally create terrain using rules → Populate with modular assets like trees and rocks.


<br>Key Benefits:

<br>Enhances both creativity and efficiency in asset creation.


<br><br><br>
<br>What is a DAG?

<br>A structure where nodes are connected in a one-way direction, forming a tree-like graph with no loops.


<br>Why DAGs?

<br>Support non-linear workflows, enabling iterative and modular development.


<br>Applications in Game Art and Development:

<br>Organizing and optimizing procedural pipelines.
<br>Managing dependencies between assets and systems.
<br>Building, modeling, or texturing assets
<br>Real-time gameplay systems


<br>DAGs
<a rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" target="_blank">https://en.wikipedia.org/wiki/Directed_acyclic_graph</a><br>
<a rel="noopener nofollow" class="external-link" href="https://www.getdbt.com/blog/guide-to-dags" target="_blank">https://www.getdbt.com/blog/guide-to-dags</a>
<br>--<br><br>
<br>Definition:

<br>Visual scripting and data-driven approaches used to create procedural systems and assets.


<br>How It Works:

<br>Nodes represent specific tasks or operations.
<br>Connections between nodes define the flow of data or operations.


<br>Common Use Cases:

<br>Procedural content generation.
<br>Shader and material creation.
<br>Logic and gameplay systems in visual scripting tools.


<br><a data-href="GMAP395-DAGsNodes.excalidraw" href="gmap-395\introduction\gmap395-dagsnodes.excalidraw.html" class="internal-link" target="_self" rel="noopener nofollow">GMAP395-DAGsNodes.excalidraw</a><br>--<br><br>
<br>Houdini:

<br>Procedural modeling, VFX, and simulations using node-based workflows.
<br>Example: Generating terrain or foliage with procedural rules.


<br>Unreal Engine:

<br>Blueprint visual scripting for game logic and interactive systems.
<br>Example: Creating interactive gameplay without traditional coding.


<br>Unity Shader Graph:

<br>Node-based tool for crafting complex shaders visually.
<br>Example: Building a dynamic water shader with transparency and reflections.


<br>--<br>Explore Further: Node-Based Workflows
<a data-tooltip-position="top" aria-label="https://www.sidefx.com/tutorials/intro-to-houdinis-node-based-workflow/" rel="noopener nofollow" class="external-link" href="https://www.sidefx.com/tutorials/intro-to-houdinis-node-based-workflow/" target="_blank">Introduction to Node-Based Workflows in Houdini</a><br>
<a data-tooltip-position="top" aria-label="https://www.sidefx.com/docs/houdini/nodes/index.html" rel="noopener nofollow" class="external-link" href="https://www.sidefx.com/docs/houdini/nodes/index.html" target="_blank">Houdini's Nodes</a><br>
<a data-tooltip-position="top" aria-label="https://spin.atomicobject.com/blender-node-based-workflows/" rel="noopener nofollow" class="external-link" href="https://spin.atomicobject.com/blender-node-based-workflows/" target="_blank">Blenders Node-Based Workflows</a>

<br>--<br><br>
<br>Modular Logic:

<br>Easily modify individual nodes without disrupting the entire system.


<br>Reusability:

<br>Nodes and node groups can be saved and reused across projects.


<br>Visualization:

<br>Provides a clear visual representation of processes and data flow.


<br>Flexibility:

<br>Supports rapid iteration and experimentation.


<br>--<br><br>
<br>Key Topics Covered:

<br>Game Design:

<br>Foundations, processes, and the importance of play.


<br>Frameworks:

<br>MDA and DDE as tools for understanding player experience.


<br>Technical Art:

<br>Bridging art and technology through procedural and modular workflows.


<br>Node-Based Workflows:

<br>Visual scripting for flexible and scalable game systems.




<br>--<br><br>
<br>Why Iteration Matters:

<br>Continuous Improvement:

<br>Allows for refinement of gameplay and visual quality.


<br>Adaptability:

<br>Respond to player feedback and emerging challenges.


<br>Polished Results:

<br>Iteration ensures systems, mechanics, and art are cohesive and engaging.




<br>Key Takeaway: Iteration isn’t just a step—it’s a philosophy.
<br>--<br><br>
<br>Emerging Technologies:

<br>AI and Machine Learning:

<br>Generative tools for textures, animations, and world-building.


<br>Real-Time Rendering:

<br>Advancements like ray tracing for hyper-realistic visuals.


<br>Procedural Workflows:

<br>Increasing reliance on algorithms to generate complex assets.




<br>The Next Frontier:

<br>Player-Created Content: Empowering users to design within games.
<br>Immersive Systems: Expanding XR (VR/AR/MR) experiences.


<br>Explore More:

<br><a data-tooltip-position="top" aria-label="https://www.gamasutra.com/" rel="noopener nofollow" class="external-link" href="https://www.gamasutra.com/" target="_blank">AI in Game Development</a>
<br><a data-tooltip-position="top" aria-label="https://www.unrealengine.com/" rel="noopener nofollow" class="external-link" href="https://www.unrealengine.com/" target="_blank">Real-Time Rendering Techniques</a>

<br><br><br><br>
<br>What excites (or scares) you most about modern game design and development tools?
<br>How do you think procedural or modular workflows influence the games we play today?
<br>--<br><br><br>
<br>Choose a game you’ve played and enjoyed.
<br>Reflect on:

<br>What elements of the game stand out to you? (e.g., visuals, mechanics, world design)
<br>How do you think these elements were created? Consider tools or workflows like procedural generation, modular design, or shaders.


<br>Light Research:

<br>Look up the game’s development process or tools used by its studio.
<br>Example tools for research:

<br>The Legend of Zelda: Breath of the Wild (physics puzzles, procedural systems)
<br>No Man’s Sky (Procedural world-building)
<br>Celeste (Iteration for accessibility and challenge balance)




<br>--<br><br>
<br>Share your observations with a partner or small group.
<br>Discuss:

<br>Similarities and differences in the chosen games.
<br>How procedural or modular workflows might have influenced the design choices.
<br>Ideas for how you might apply these concepts in your own projects.


<br>--<br><br>
<br>Volunteers and/or groups present highlights of their discussions:

<br>A game they analyzed and how procedural/modular workflows contributed to its design.
<br>An insight or idea they found particularly interesting.


<br><br><br>Reflection Questions
How does understanding the development process help you approach game design or technical art critically?<br>
What trends or common tools did you notice across different games?<br>
How might these approaches inspire your work as a game designer or artist?
]]></description><link>gmap-395\introduction\gmap-395-wk-1-slides.html</link><guid isPermaLink="false">GMAP 395/Introduction/GMAP 395 - WK 1 - Slides.md</guid><pubDate>Tue, 07 Jan 2025 15:54:10 GMT</pubDate><enclosure url="gmap-395\introduction\design-everyday-things.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="gmap-395\introduction\design-everyday-things.jpg"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>